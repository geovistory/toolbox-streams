/*
 * This file was generated by the Gradle 'init' task.
 */

plugins {
    id 'org.geovistory.toolbox.streams.java-application-conventions'

    // used to set semantic version
    id 'com.glovoapp.semantic-versioning' version '1.1.10'

    // Used to containerize apps
    id 'com.google.cloud.tools.jib' version '3.3.0'

    // Used to build java class source code from avro schemas
    id "com.github.davidmc24.gradle.plugin.avro" version "1.5.0"
}

dependencies {
    // for .env
    implementation 'io.github.cdimascio:dotenv-java:2.2.4'
    // Confluent Avro Serdes
    implementation group: 'io.confluent', name: 'kafka-streams-avro-serde', version: '7.3.0'

}

application {
    // Define the main class for the application.
    mainClassName= 'org.geovistory.toolbox.streams.analysis.statements.App'
}


jar {
    manifest.attributes('Main-Class': application.mainClassName)
}

jib {
    from {
        image = "ghcr.io/geovistory/kafka-streams-base:0.2"
    }
    to {
        image = getDockerImageTag()
    }
    container {
        jvmFlags = []
        mainClass = application.mainClassName
        format = 'OCI'
    }
}
/**
 * Get docker image tag
 * @return for example "ghcr.io/geovistory/toolbox-streams-analysis-statements:0.1.0"
 */
String getDockerImageTag() {
    return 'ghcr.io/geovistory/toolbox-streams-analysis-statements' + ':' + getDockerTagSuffix()
}

/**
 * Get docker tag suffix from semantic version and pull request metadata.
 * @return for example "0.2.3" or "0.1.0-pr-12.0"
 */
String getDockerTagSuffix() {
    if (pullRequestNumber) return "${project.semanticVersion.version.get()}-pr-${pullRequestNumber}.${pullRequestPushCount}"
    else return "${project.semanticVersion.version.get()}"
}


task("printDockerImageTag") {
    doLast {
        println getDockerImageTag()
    }
}

task("printDockerTagSuffix") {
    doLast {
        println getDockerTagSuffix()
    }
}


// inspired by https://discuss.gradle.org/t/how-to-get-gradle-variables-in-my-java-method/37580/2
task generateJava {
    ext.outputDir = "$buildDir/generated/java"
    outputs.dir outputDir
    doLast {
        mkdir "$outputDir/org/geovistory/toolbox/streams/analysis/statements"
        file("$outputDir/org/geovistory/toolbox/streams/analysis/statements/BuildProperties.java").text =
                """|package org.geovistory.toolbox.streams.analysis.statements;
               |public class BuildProperties {
               |    public static String getDockerTagSuffix() { return "${getDockerTagSuffix()}"; }        
               |    public static String getDockerImageTag() { return "${getDockerImageTag()}"; }
               |}""".stripMargin()
    }
}
compileJava.dependsOn generateJava
sourceSets.main.java.srcDir generateJava.outputDir