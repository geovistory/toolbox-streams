
package org.geovistory.toolbox.streams.project.config;

import org.apache.kafka.streams.StreamsBuilder;
import org.apache.kafka.streams.kstream.Consumed;
import org.apache.kafka.streams.kstream.KStream;
import org.apache.kafka.streams.kstream.KTable;
import org.geovistory.toolbox.streams.avro.*;
import org.geovistory.toolbox.streams.lib.ConfluentAvroSerdes;
import org.geovistory.toolbox.streams.lib.InputTopicHelper;
import org.geovistory.toolbox.streams.project.config.processors.*;

/**
 * This class provides helper methods to register
 * output topics (generated by this app).
 * These helper methods are mainly used for testing.
 */
public class RegisterInnerTopic extends InputTopicHelper {

    public ConfluentAvroSerdes avroSerdes;

    public RegisterInnerTopic(StreamsBuilder builder) {
        super(builder);
        this.avroSerdes = new ConfluentAvroSerdes();
    }

    public KStream<ProjectProfileKey, ProjectProfileValue> projectProfileStream() {
        return builder.stream(ProjectProfiles.output.TOPICS.project_profile,
                Consumed.with(avroSerdes.ProjectProfileKey(), avroSerdes.ProjectProfileValue()));
    }


    public KStream<GeovClassLabelKey, GeovClassLabelValue> geovClassLabelStream() {
        return builder.stream(GeovClassLabel.output.TOPICS.geov_class_label,
                Consumed.with(avroSerdes.GeovClassLabelKey(), avroSerdes.GeovClassLabelValue()));
    }

    public KStream<ProjectClassKey, ProjectClassValue> projectClassStream() {
        return builder.stream(ProjectClass.output.TOPICS.project_class,
                Consumed.with(avroSerdes.ProjectClassKey(), avroSerdes.ProjectClassValue()));
    }

    public KTable<ProjectClassKey, ProjectClassValue> projectClassTable() {
        return builder.table(ProjectClass.output.TOPICS.project_class,
                Consumed.with(avroSerdes.ProjectClassKey(), avroSerdes.ProjectClassValue()));
    }


    public KStream<GeovPropertyLabelKey, GeovPropertyLabelValue> geovPropertyLabelStream() {
        return builder.stream(GeovPropertyLabel.output.TOPICS.geov_property_label,
                Consumed.with(avroSerdes.GeovPropertyLabelKey(), avroSerdes.GeovPropertyLabelValue()));
    }

    public KStream<ProjectPropertyKey, ProjectPropertyValue> projectPropertyStream() {
        return builder.stream(ProjectProperty.output.TOPICS.project_property,
                Consumed.with(avroSerdes.ProjectPropertyKey(), avroSerdes.ProjectPropertyValue()));
    }


    public KTable<CommunityEntityLabelConfigKey, CommunityEntityLabelConfigValue> communityEntityLabelConfigTable() {
        return builder.table(CommunityEntityLabelConfig.output.TOPICS.community_entity_label_config,
                Consumed.with(avroSerdes.CommunityEntityLabelConfigKey(), avroSerdes.CommunityEntityLabelConfigValue()));
    }


}
