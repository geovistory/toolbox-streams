import java.nio.file.Files
import java.nio.file.Paths

/*
 * This file was generated by the Gradle 'init' task.
 */

plugins {
    id 'org.geovistory.toolbox.streams.java-library-conventions'

    // Used to build java class source code from avro schemas
    id "com.github.davidmc24.gradle.plugin.avro" version "1.5.0"

}

dependencies {

    // For gradle-avro-plugin
    implementation "org.apache.avro:avro:1.11.0"

    // For list serdes
    implementation "org.apache.kafka:kafka-clients:3.4.0"

    // for .env
    implementation 'io.github.cdimascio:dotenv-java:2.2.4'

    // Confluent Avro Serdes
    implementation(group: 'io.confluent', name: 'kafka-streams-avro-serde', version: '7.3.2') {
        exclude group: 'org.apache.kafka', module: 'kafka-clients'
    }

    // Postgis to parse Well-known binary to Java Objects
    implementation 'org.postgis:postgis-jdbc:1.3.3'
}

generateAvroJava {
    dependsOn('stag')
    dependsOn('prod')
    // dependsOn('debeziumStag')
    // dependsOn('debeziumProd')
    // doLast {
    //     String dir = "generated-main-avro-java/dev"
    //     System.out.println("Add Reflection in " + dir)
    //     String path = project.projectDir.toString() + "/build/" + dir
    //     addReflection(path)
    // }

}

tasks.register('stag', Copy) {
    String prefix = 'stag'
    System.out.println("Creating " + prefix)
    var source = "src/main/avro/debezium"
    var target = source + "-" + prefix
    from layout.projectDirectory.dir(source)
    into layout.projectDirectory.dir(target)
    doLast {
        String path = project.projectDir.toString() + "/" + target
        refactorAvroNamespaces(path, prefix)
    }
}
tasks.register('prod', Copy) {
    String prefix = 'prod'
    System.out.println("Creating " + prefix)
    var source = "src/main/avro/debezium"
    var target = source + "-" + prefix
    from layout.projectDirectory.dir(source)
    into layout.projectDirectory.dir(target)
    doLast {
        String path = project.projectDir.toString() + "/" + target
        refactorAvroNamespaces(path, prefix)
    }
}



private static void refactorAvroNamespaces(String directoryPath, String prefix) {
    try (var filePaths = Files.walk(Paths.get(directoryPath))) {
        filePaths
                .filter(Files::isRegularFile)
                .forEach(filePath -> {
                    var myFile = new File(filePath.toString())
                    def fileText = myFile.text

                    var newText = fileText.replace("\"namespace\": \"dev.", "\"namespace\": \"" + prefix + ".")
                     newText = newText.replace("\"connect.name\": \"dev.", "\"connect.name\": \"" + prefix + ".")

                    myFile.write(newText)
                })
    }
}
/*

tasks.register('debeziumStag', Copy) {
    String prefix = 'stag'
    String targetDir = "generated-main-avro-java/ " + prefix
    System.out.println("Creating " + targetDir)
    from layout.buildDirectory.dir("generated-main-avro-java/dev")
    into layout.buildDirectory.dir(targetDir)
    doLast {
        String path = project.projectDir.toString() + "/build/" + targetDir
        refactorDirectory(path, prefix)
    }
}
tasks.register('debeziumProd', Copy) {
    String prefix = 'prod'
    String targetDir = "generated-main-avro-java/" + prefix
    System.out.println("Creating " + targetDir)
    from layout.buildDirectory.dir("generated-main-avro-java/dev")
    into layout.buildDirectory.dir(targetDir)
    doLast {
        String path = project.projectDir.toString() + "/build/" + targetDir
        refactorDirectory(path, prefix)
    }
}
private static void refactorDirectory(String directoryPath, String prefix) {
    try (var filePaths = Files.walk(Paths.get(directoryPath))) {
        filePaths
                .filter(Files::isRegularFile)
                .forEach(filePath -> {
                    var myFile = new File(filePath.toString())
                    def fileText = myFile.text

                    def p = Pattern.compile("package ([\\w|.]*);", Pattern.DOTALL)
                    var packageName = (fileText =~ p)[0][1].toString()

                    p = Pattern.compile("public class (\\w*)", Pattern.DOTALL)
                    var className = (fileText =~ p)[0][1].toString()
                    var oldPackageName = packageName
                    var newPackageName = packageName.replace("dev", prefix)
                    var newText = "package " + newPackageName + ";\n" +
                            "import io.quarkus.runtime.annotations.RegisterForReflection;\n" +
                            "@RegisterForReflection\n" +
                            "public class " + className + " extends " + oldPackageName + "." + className +
                            " implements org.apache.avro.specific.SpecificRecord { }"
                    myFile.write(newText)
                })
    }
}

private static void addReflection(String directoryPath) {
    try (var filePaths = Files.walk(Paths.get(directoryPath))) {
        filePaths
                .filter(Files::isRegularFile)
                .forEach(filePath -> {
                    var myFile = new File(filePath.toString())
                    def fileText = myFile.text

                    var o = "\nimport org.apache.avro.generic.GenericArray"
                    var n = "import io.quarkus.runtime.annotations.RegisterForReflection;" + o
                    var newText = fileText.replace(o, n)

                    o = "\n@org.apache.avro.specific.AvroGenerated"
                    n = "@RegisterForReflection" + o
                    newText = newText.replace(o, n)

                    myFile.write(newText)
                })
    }
}*/
