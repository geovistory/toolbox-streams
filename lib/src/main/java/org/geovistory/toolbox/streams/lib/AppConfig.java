package org.geovistory.toolbox.streams.lib;

import io.github.cdimascio.dotenv.Dotenv;


public enum AppConfig {
    INSTANCE();

    // url of the apicurio registry
    private final String apicurioRegistryUrl;

    // url of the confluent schema registry
    private String schemaRegistryUrl;

    // kafka bootstrap servers (comma separated)
    private final String kafkaBootstrapServers;

    // application id
    private final String applicationId;

    // path of state store directory
    private final String stateDir;

    //prefix of input topics (generated by Debezium connector)
    private final String inputTopicPrefix;

    // prefix of output topics (generated by this app)
    private final String outputTopicPrefix;

    // Number of partitions of output topics
    private final String outputTopicPartitions;

    // Replication factor of output topics
    private final String outputTopicReplicationFactor;

    // rocksdb TOTAL_OFF_HEAP_SIZE_MB
    private final String rocksdbTotalOffHeapMb;


    // rocksdb TOTAL_MEMTABLE_MB
    private final String rocksdbTotalMemtableMb;

    // streams config cache.max.bytes.buffering
    private final String streamsCacheMaxBytesBuffering;

    // streams config commit.interval.ms
    private final String streamsCommitIntervalMs;

    // streams config buffer.memory
    private final String streamsBufferMemory;

    // streams config fetch.max.bytes
    private final String streamsFetchMaxBytes;

    // streams config fetch.max.wait.ms
    private final String streamsFetchMaxWaitMs;

    // streams config send.buffer.bytes
    private final String streamsSendBufferBytes;

    // streams config receive.buffer.bytes
    private final String streamsReceiveBufferBytes;

    // streams config buffered.records.per.partition
    private final String streamsBufferedRecordsPerPartition;

    AppConfig() {
        // load .env for local development
        Dotenv dotenv = Dotenv
                .configure()
                .ignoreIfMissing()
                .load();


        this.apicurioRegistryUrl = Utils.coalesce(
                System.getProperty("TS_APICURIO_REGISTRY_URL"),
                System.getenv("TS_APICURIO_REGISTRY_URL"),
                dotenv.get("TS_APICURIO_REGISTRY_URL"),
                "http://localhost:8080/apis/registry/v2"
        );

        this.schemaRegistryUrl = Utils.coalesce(
                System.getProperty("TS_SCHEMA_REGISTRY_URL"),
                System.getenv("TS_SCHEMA_REGISTRY_URL"),
                dotenv.get("TS_SCHEMA_REGISTRY_URL"),
                "http://localhost:8081/"
        );


        this.kafkaBootstrapServers = Utils.coalesce(
                System.getProperty("TS_BOOTSTRAP_SERVERS"),
                System.getenv("TS_BOOTSTRAP_SERVERS"),
                dotenv.get("TS_BOOTSTRAP_SERVERS"),
                "http://localhost:9092"
        );

        this.applicationId = Utils.coalesce(
                System.getProperty("TS_APPLICATION_ID"),
                System.getenv("TS_APPLICATION_ID"),
                dotenv.get("TS_APPLICATION_ID"),
                "dev"
        );

        this.stateDir = Utils.coalesce(
                System.getProperty("TS_STATE_DIR"),
                System.getenv("TS_STATE_DIR"),
                dotenv.get("TS_STATE_DIR"),
                "tmp/kafka-streams"
        );

        this.inputTopicPrefix = Utils.coalesce(
                System.getProperty("TS_INPUT_TOPIC_NAME_PREFIX"),
                System.getenv("TS_INPUT_TOPIC_NAME_PREFIX"),
                dotenv.get("TS_INPUT_TOPIC_NAME_PREFIX"),
                "dev"
        );

        this.outputTopicPrefix = Utils.coalesce(
                System.getProperty("TS_OUTPUT_TOPIC_NAME_PREFIX"),
                System.getenv("TS_OUTPUT_TOPIC_NAME_PREFIX"),
                dotenv.get("TS_OUTPUT_TOPIC_NAME_PREFIX"),
                "dev"
        );

        this.outputTopicPartitions = Utils.coalesce(
                System.getProperty("TS_OUTPUT_TOPIC_PARTITIONS"),
                System.getenv("TS_OUTPUT_TOPIC_PARTITIONS"),
                dotenv.get("TS_OUTPUT_TOPIC_PARTITIONS"),
                "4"
        );

        this.outputTopicReplicationFactor = Utils.coalesce(
                System.getProperty("TS_OUTPUT_TOPIC_REPLICATION_FACTOR"),
                System.getenv("TS_OUTPUT_TOPIC_REPLICATION_FACTOR"),
                dotenv.get("TS_OUTPUT_TOPIC_REPLICATION_FACTOR"),
                "3"
        );

        this.rocksdbTotalOffHeapMb = Utils.coalesce(
                System.getProperty("ROCKSDB_TOTAL_OFF_HEAP_MB"),
                System.getenv("ROCKSDB_TOTAL_OFF_HEAP_MB"),
                dotenv.get("ROCKSDB_TOTAL_OFF_HEAP_MB"),
                "1000"
        );

        this.rocksdbTotalMemtableMb = Utils.coalesce(
                System.getProperty("ROCKSDB_TOTAL_MEMTABLE_MB"),
                System.getenv("ROCKSDB_TOTAL_MEMTABLE_MB"),
                dotenv.get("ROCKSDB_TOTAL_MEMTABLE_MB"),
                "100"
        );

        this.streamsCacheMaxBytesBuffering = Utils.coalesce(
                System.getProperty("STREAMS_CACHE_MAX_BYTES_BUFFERING_CONFIG"),
                System.getenv("STREAMS_CACHE_MAX_BYTES_BUFFERING_CONFIG"),
                dotenv.get("STREAMS_CACHE_MAX_BYTES_BUFFERING_CONFIG"),
                "10485760" // 10485760 => 10MB per Thread
        );

        this.streamsCommitIntervalMs = Utils.coalesce(
                System.getProperty("STREAMS_COMMIT_INTERVAL_MS"),
                System.getenv("STREAMS_COMMIT_INTERVAL_MS"),
                dotenv.get("STREAMS_COMMIT_INTERVAL_MS"),
                "30000" // 30000 => 30 seconds
        );

        this.streamsBufferMemory = Utils.coalesce(
                System.getProperty("STREAMS_BUFFER_MEMORY"),
                System.getenv("STREAMS_BUFFER_MEMORY"),
                dotenv.get("STREAMS_BUFFER_MEMORY"),
                "33554432" // 33554432 => 32 MB
        );

        this.streamsFetchMaxBytes = Utils.coalesce(
                System.getProperty("STREAMS_FETCH_MAX_BYTES"),
                System.getenv("STREAMS_FETCH_MAX_BYTES"),
                dotenv.get("STREAMS_FETCH_MAX_BYTES"),
                "52428800" // 52428800 => 50 MB
        );

        this.streamsFetchMaxWaitMs = Utils.coalesce(
                System.getProperty("STREAMS_FETCH_MAX_WAIT_MS"),
                System.getenv("STREAMS_FETCH_MAX_WAIT_MS"),
                dotenv.get("STREAMS_FETCH_MAX_WAIT_MS"),
                "500" // 500 => half a second
        );

        this.streamsSendBufferBytes = Utils.coalesce(
                System.getProperty("STREAMS_SEND_BUFFER_BYTES"),
                System.getenv("STREAMS_SEND_BUFFER_BYTES"),
                dotenv.get("STREAMS_SEND_BUFFER_BYTES"),
                "131072" // 131072 => 128 KB
        );

        this.streamsReceiveBufferBytes = Utils.coalesce(
                System.getProperty("STREAMS_RECEIVE_BUFFER_BYTES"),
                System.getenv("STREAMS_RECEIVE_BUFFER_BYTES"),
                dotenv.get("STREAMS_RECEIVE_BUFFER_BYTES"),
                "32768" // 32768 => 32 KB
        );

        this.streamsBufferedRecordsPerPartition = Utils.coalesce(
                System.getProperty("STREAMS_BUFFERED_RECORDS_PER_PARTITION"),
                System.getenv("STREAMS_BUFFERED_RECORDS_PER_PARTITION"),
                dotenv.get("STREAMS_BUFFERED_RECORDS_PER_PARTITION"),
                "1000" // 1000 records
        );
    }

    public AppConfig getInstance() {
        return INSTANCE;
    }

    public String getStateDir() {
        return stateDir;
    }

    public String getApicurioRegistryUrl() {
        return apicurioRegistryUrl;
    }

    public String getKafkaBootstrapServers() {
        return kafkaBootstrapServers;
    }

    public String getApplicationId() {
        return applicationId;
    }

    public String getInputTopicPrefix() {
        return inputTopicPrefix;
    }

    public String getOutputTopicPrefix() {
        return outputTopicPrefix;
    }

    public String getOutputTopicPartitions() {
        return outputTopicPartitions;
    }

    public String getOutputTopicReplicationFactor() {
        return outputTopicReplicationFactor;
    }

    public String getSchemaRegistryUrl() {
        return schemaRegistryUrl;
    }

    public void setSchemaRegistryUrl(String schemaRegistryUrl) {
        this.schemaRegistryUrl = schemaRegistryUrl;
    }


    public String getRocksdbTotalOffHeapMb() {
        return rocksdbTotalOffHeapMb;
    }

    public String getRocksdbTotalMemtableMb() {
        return rocksdbTotalMemtableMb;
    }

    public String getStreamsCacheMaxBytesBuffering() {
        return streamsCacheMaxBytesBuffering;
    }

    public String getStreamsCommitIntervalMs() {
        return streamsCommitIntervalMs;
    }

    public String getStreamsBufferMemory() {
        return streamsBufferMemory;
    }

    public String getStreamsFetchMaxBytes() {
        return streamsFetchMaxBytes;
    }

    public String getStreamsFetchMaxWaitMs() {
        return streamsFetchMaxWaitMs;
    }

    public String getStreamsSendBufferBytes() {
        return streamsSendBufferBytes;
    }

    public String getStreamsReceiveBufferBytes() {
        return streamsReceiveBufferBytes;
    }

    public String getStreamsBufferedRecordsPerPartition() {
        return streamsBufferedRecordsPerPartition;
    }

    public void printConfigs() {
        System.out.println("apicurioRegistryUrl: " + apicurioRegistryUrl);
        System.out.println("schemaRegistryUrl: " + schemaRegistryUrl);
        System.out.println("kafkaBootstrapServers: " + kafkaBootstrapServers);
        System.out.println("applicationId: " + applicationId);
        System.out.println("stateDir: " + stateDir);
        System.out.println("inputTopicPrefix: " + inputTopicPrefix);
        System.out.println("outputTopicPrefix: " + outputTopicPrefix);
        System.out.println("outputTopicPartitions: " + outputTopicPartitions);
        System.out.println("rocksdbTotalOffHeapMb: " + rocksdbTotalOffHeapMb);
        System.out.println("rocksdbTotalMemtableMb: " + rocksdbTotalMemtableMb);
        System.out.println("streamsCacheMaxBytesBuffering: " + streamsCacheMaxBytesBuffering);
        System.out.println("streamsCommitIntervalMs: " + streamsCommitIntervalMs);
        System.out.println("streamsBufferMemory: " + streamsBufferMemory);
        System.out.println("streamsFetchMaxBytes: " + streamsFetchMaxBytes);
        System.out.println("streamsFetchMaxWaitMs: " + streamsFetchMaxWaitMs);
        System.out.println("streamsSendBufferBytes: " + streamsSendBufferBytes);
        System.out.println("streamsReceiveBufferBytes: " + streamsReceiveBufferBytes);
        System.out.println("streamsBufferedRecordsPerPartition: " + streamsBufferedRecordsPerPartition);
    }
}
