
package org.geovistory.toolbox.streams.base.config;

import jakarta.enterprise.context.ApplicationScoped;
import jakarta.inject.Inject;
import org.apache.kafka.streams.kstream.KStream;
import org.apache.kafka.streams.kstream.KTable;
import org.geovistory.toolbox.streams.avro.*;
import org.geovistory.toolbox.streams.lib.ConfiguredAvroSerde;
import org.geovistory.toolbox.streams.lib.TsRegisterInputTopic;

/**
 * This class provides helper methods to register
 * output topics (generated by this app).
 * These helper methods are mainly used for testing.
 */
@ApplicationScoped
public class RegisterInnerTopic extends TsRegisterInputTopic {

    @Inject
    ConfiguredAvroSerde as;
    @Inject
    public BuilderSingleton builderSingleton;
    @Inject
    OutputTopicNames outputTopicNames;

    public RegisterInnerTopic(ConfiguredAvroSerde as, BuilderSingleton builderSingleton, OutputTopicNames outputTopicNames) {
        this.as = as;
        this.builderSingleton = builderSingleton;
        this.outputTopicNames = outputTopicNames;
    }


    public KStream<ProjectProfileKey, ProjectProfileValue> projectProfileStream() {
        return getStream(
                builderSingleton.builder,
                outputTopicNames.projectProfile(),
                as.key(), as.value());
    }


    public KStream<GeovClassLabelKey, GeovClassLabelValue> geovClassLabelStream() {
        return getStream(
                builderSingleton.builder,
                outputTopicNames.geovClassLabel(),
                as.key(), as.value());
    }


    public KStream<ProjectClassKey, ProjectClassValue> projectClassStream() {
        return getStream(
                builderSingleton.builder,
                outputTopicNames.projectClass(),
                as.key(), as.value());
    }

    public KTable<ProjectClassKey, ProjectClassValue> projectClassTable() {
        return getTable(
                builderSingleton.builder,
                outputTopicNames.projectClass(),
                as.key(), as.value());
    }


    public KStream<GeovPropertyLabelKey, GeovPropertyLabelValue> geovPropertyLabelStream() {
        return getStream(
                builderSingleton.builder,
                outputTopicNames.geovPropertyLabel(),
                as.key(), as.value());
    }

    public KStream<ProjectPropertyKey, ProjectPropertyValue> projectPropertyStream() {
        return getStream(
                builderSingleton.builder,
                outputTopicNames.projectProperty(),
                as.key(), as.value());

    }

    public KTable<CommunityEntityLabelConfigKey, CommunityEntityLabelConfigValue> communityEntityLabelConfigTable() {
        return getTable(
                builderSingleton.builder,
                outputTopicNames.communityEntityLabelConfig(),
                as.key(), as.value());
    }


}
