package org.geovistory.toolbox.streams.base.config;

import jakarta.enterprise.context.ApplicationScoped;
import jakarta.inject.Inject;
import org.apache.kafka.streams.kstream.KStream;
import org.apache.kafka.streams.kstream.KTable;
import org.geovistory.toolbox.streams.avro.*;
import org.geovistory.toolbox.streams.lib.ConfiguredAvroSerde;
import org.geovistory.toolbox.streams.lib.TsRegisterInputTopic;

/**
 * This class provides helper methods to register
 * source topics (topics consumed but not generated by this app)
 */

@ApplicationScoped
public class RegisterInputTopic extends TsRegisterInputTopic {

    @Inject
    ConfiguredAvroSerde as;
    @Inject
    public BuilderSingleton builderSingleton;

    @Inject
    public InputTopicNames inputTopicNames;

    RegisterInputTopic() {
    }

    public RegisterInputTopic(ConfiguredAvroSerde as, BuilderSingleton builderSingleton, InputTopicNames inputTopicNames) {
        this.as = as;
        this.builderSingleton = builderSingleton;
        this.inputTopicNames = inputTopicNames;
    }


    public KStream<dev.projects.text_property.Key, dev.projects.text_property.Value> proTextPropertyStream() {
        return getRepartitionedStream(
                builderSingleton.builder,
                inputTopicNames.proTextProperty(),
                as.key(),
                as.value()
        );
    }

    public KTable<dev.projects.dfh_profile_proj_rel.Key, dev.projects.dfh_profile_proj_rel.Value> proProfileProjRelTable() {
        return getRepartitionedTable(
                builderSingleton.builder,
                inputTopicNames.proProfileProjRel(),
                as.key(),
                as.value()
        );
    }


    public KTable<dev.projects.project.Key, dev.projects.project.Value> proProjectTable() {
        return getRepartitionedTable(
                builderSingleton.builder,
                inputTopicNames.proProject(),
                as.key(),
                as.value()
        );
    }

    public KStream<dev.system.config.Key, dev.system.config.Value> sysConfigStream() {
        return getRepartitionedStream(
                builderSingleton.builder,
                inputTopicNames.sysConfig(),
                as.key(),
                as.value()
        );
    }

    public KStream<dev.projects.entity_label_config.Key, dev.projects.entity_label_config.Value> proEntityLabelConfigStream() {
        return getStream(
                builderSingleton.builder,
                inputTopicNames.proEntityLabelConfig(),
                as.key(),
                as.value()
        );
    }

    public KStream<OntomeClassKey, OntomeClassValue> ontomeClassStream() {
        return getStream(
                builderSingleton.builder,
                inputTopicNames.ontomeClass(),
                as.key(), as.value());
    }

    public KStream<OntomePropertyKey, OntomePropertyValue> ontomePropertyStream() {
        return getStream(
                builderSingleton.builder,
                inputTopicNames.ontomeProperty(),
                as.key(), as.value());
    }


    public KStream<OntomeClassLabelKey, OntomeClassLabelValue> ontomeClassLabelStream() {
        return getStream(
                builderSingleton.builder,
                inputTopicNames.ontomeClassLabel(),
                as.key(), as.value());
    }

    public KTable<OntomeClassLabelKey, OntomeClassLabelValue> ontomeClassLabelTable() {
        return getTable(
                builderSingleton.builder,
                inputTopicNames.ontomeClassLabel(),
                as.key(), as.value());
    }

    public KStream<OntomePropertyLabelKey, OntomePropertyLabelValue> ontomePropertyLabelStream() {
        return getStream(
                builderSingleton.builder,
                inputTopicNames.ontomePropertyLabel(),
                as.key(), as.value());
    }

}