
package org.geovistory.toolbox.streams.entity.label;

import org.apache.kafka.streams.StreamsBuilder;
import org.apache.kafka.streams.kstream.Consumed;
import org.apache.kafka.streams.kstream.KStream;
import org.apache.kafka.streams.kstream.KTable;
import org.geovistory.toolbox.streams.avro.*;
import org.geovistory.toolbox.streams.entity.label.processsors.base.ProjectEntityVisibility;
import org.geovistory.toolbox.streams.entity.label.processsors.project.*;
import org.geovistory.toolbox.streams.lib.ConfluentAvroSerdes;
import org.geovistory.toolbox.streams.lib.InputTopicHelper;

/**
 * This class provides helper methods to register
 * output topics (generated by this app).
 * These helper methods are mainly used for testing.
 */
public class RegisterInnerTopic extends InputTopicHelper {
    public ConfluentAvroSerdes avroSerdes;

    public RegisterInnerTopic(StreamsBuilder builder) {
        super(builder);
        this.avroSerdes = new ConfluentAvroSerdes();
    }


    public KTable<ProjectEntityKey, ProjectEntityValue> projectEntityTable() {
        return getTable(ProjectEntity.output.TOPICS.project_entity,
                avroSerdes.ProjectEntityKey(), avroSerdes.ProjectEntityValue());
    }


    public KTable<ProjectStatementKey, ProjectStatementValue> projectStatementWithEntityTable() {
        return getTable(ProjectStatementWithEntity.output.TOPICS.project_statement_with_entity,
                avroSerdes.ProjectStatementKey(), avroSerdes.ProjectStatementValue());
    }

    public KTable<ProjectEntityKey, ProjectEntityLabelValue> projectEntityLabelTable() {
        return getTable(ProjectEntityLabel.output.TOPICS.project_entity_label,
                avroSerdes.ProjectEntityKey(), avroSerdes.ProjectEntityLabelValue());
    }

    public KStream<ProjectStatementKey, ProjectStatementValue> projectStatementWithLiteralStream() {
        return builder.stream(ProjectStatementWithLiteral.output.TOPICS.project_statement_with_literal,
                Consumed.with(avroSerdes.ProjectStatementKey(), avroSerdes.ProjectStatementValue()));
    }

    public KStream<ProjectTopStatementsKey, ProjectTopStatementsValue> projectTopOutgoingStatementsStream() {
        return builder.stream(ProjectTopOutgoingStatements.output.TOPICS.project_top_outgoing_statements,
                Consumed.with(avroSerdes.ProjectTopStatementsKey(), avroSerdes.ProjectTopStatementsValue()));
    }

    public KStream<ProjectTopStatementsKey, ProjectTopStatementsValue> projectTopIncomingStatementsStream() {
        return builder.stream(ProjectTopIncomingStatements.output.TOPICS.project_top_incoming_statements,
                Consumed.with(avroSerdes.ProjectTopStatementsKey(), avroSerdes.ProjectTopStatementsValue()));
    }

    public KTable<ProjectTopStatementsKey, ProjectTopStatementsValue> projectTopStatementsTable() {
        return getTable(ProjectTopStatements.output.TOPICS.project_top_statements,
                avroSerdes.ProjectTopStatementsKey(), avroSerdes.ProjectTopStatementsValue());
    }

    public KStream<ProjectEntityKey, ProjectEntityVisibilityValue> projectEntityVisibilityStream() {
        return getStream(ProjectEntityVisibility.output.TOPICS.project_entity_visibility,
                avroSerdes.ProjectEntityKey(), avroSerdes.ProjectEntityVisibilityValue());
    }
    public KStream<ProjectStatementKey, ProjectStatementValue> projectStatementWithEntityStream() {
        return getStream(ProjectStatementWithEntity.output.TOPICS.project_statement_with_entity,
                avroSerdes.ProjectStatementKey(), avroSerdes.ProjectStatementValue());
    }
}
