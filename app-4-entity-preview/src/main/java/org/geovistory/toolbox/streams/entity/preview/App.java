/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package org.geovistory.toolbox.streams.entity.preview;

import org.apache.kafka.streams.Topology;
import org.eclipse.microprofile.config.inject.ConfigProperty;
import org.geovistory.toolbox.streams.entity.preview.processors.EntityPreview;
import org.geovistory.toolbox.streams.entity.preview.processors.community.CommunityEntityPreview;
import org.geovistory.toolbox.streams.entity.preview.processors.project.ProjectEntityPreview;
import org.geovistory.toolbox.streams.lib.TsAdmin;

import javax.enterprise.inject.Produces;
import javax.inject.Inject;
import java.util.ArrayList;


public class App {

    @ConfigProperty(name = "ts.output.topic.partitions")
    int outputTopicPartitions;
    @ConfigProperty(name = "ts.output.topic.replication.factor")
    short outputTopicReplicationFactor;

    @ConfigProperty(name = "quarkus.kafka.streams.bootstrap.servers")
    String bootstrapServers;
    @Inject
    ProjectEntityPreview projectEntityPreview;
    @Inject
    CommunityEntityPreview communityEntityPreview;
    @Inject
    EntityPreview entityPreview;
    @Inject
    BuilderSingleton builderSingleton;
    @Inject
    RegisterInputTopic registerInputTopic;
    @Inject
    RegisterInnerTopic registerInnerTopic;
    @Inject
    OutputTopicNames outputTopicNames;

    Boolean buildTopologyCalled = false;


    //  All we need to do for that is to declare a CDI producer method which returns the Kafka Streams Topology; the Quarkus extension will take care of configuring, starting and stopping the actual Kafka Streams engine.
    @Produces
    public Topology buildTopology() {

        if (buildTopologyCalled) {
            return null;
        }
        buildTopologyCalled = true;

        // add processors of sub-topologies
        addSubTopologies();

        // create topics in advance to ensure correct configuration (partition, compaction, ect.)
        createTopics();

        // build the topology
        return builderSingleton.builder.build();
    }


    private void addSubTopologies() {

        addProjectView();
        addCommunityView();
        addMergedView();
    }

    private void addProjectView() {
        // register input topics as KTables
        var projectEntityTable = registerInputTopic.projectEntityTable();
        var projectEntityLabelTable = registerInputTopic.projectEntityLabelTable();
        var projectEntityClassLabelTable = registerInputTopic.projectEntityClassLabelTable();
        var projectEntityTypeTable = registerInputTopic.projectEntityTypeTable();
        var projectEntityTimeSpanTable = registerInputTopic.projectEntityTimeSpanTable();
        var projectEntityFulltextTable = registerInputTopic.projectEntityFulltextTable();
        var projectEntityClassMetadataTable = registerInputTopic.projectEntityClassMetadataTable();

        // add sub-topology ProjectEntityPreview
        projectEntityPreview.addProcessors(
                projectEntityTable,
                projectEntityLabelTable,
                projectEntityClassLabelTable,
                projectEntityTypeTable,
                projectEntityTimeSpanTable,
                projectEntityFulltextTable,
                projectEntityClassMetadataTable
        );
    }

    private void addCommunityView() {
        // register input topics as KTables
        var communityEntityTable = registerInputTopic.communityEntityTable();
        var communityEntityLabelTable = registerInputTopic.communityEntityLabelTable();
        var communityEntityClassLabelTable = registerInputTopic.communityEntityClassLabelTable();
        var communityEntityTypeTable = registerInputTopic.communityEntityTypeTable();
        var communityEntityTimeSpanTable = registerInputTopic.communityEntityTimeSpanTable();
        var communityEntityFulltextTable = registerInputTopic.communityEntityFulltextTable();
        var communityEntityClassMetadataTable = registerInputTopic.communityEntityClassMetadataTable();

        // add sub-topology ProjectEntityPreview
        communityEntityPreview.addProcessors(
                communityEntityTable,
                communityEntityLabelTable,
                communityEntityClassLabelTable,
                communityEntityTypeTable,
                communityEntityTimeSpanTable,
                communityEntityFulltextTable,
                communityEntityClassMetadataTable
        );
    }

    private void addMergedView() {
        // register inner topics as KStream
        var projectEntityPreviewStream = registerInnerTopic.projectEntityPreviewStream();
        var communityEntityPreviewStream = registerInnerTopic.communityEntityPreviewStream();

        // add sub-topology ProjectEntityPreview
        entityPreview.addProcessors(
                projectEntityPreviewStream,
                communityEntityPreviewStream
        );
    }

    private void createTopics() {
        var admin = new TsAdmin(bootstrapServers);

        // create output topics (with number of partitions and delete.policy=compact)
        var topics = new ArrayList<String>();
        topics.add(outputTopicNames.projectEntityPreview());
        topics.add(outputTopicNames.communityEntityPreview());
        topics.add(outputTopicNames.entityPreview());
        admin.createOrConfigureTopics(topics, outputTopicPartitions, outputTopicReplicationFactor);

    }

}
