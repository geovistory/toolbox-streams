package org.geovistory.toolbox.streams.statement.subject;

import org.apache.kafka.streams.kstream.KTable;
import org.eclipse.microprofile.config.inject.ConfigProperty;
import org.geovistory.toolbox.streams.avro.NodeKey;
import org.geovistory.toolbox.streams.avro.NodeValue;
import org.geovistory.toolbox.streams.lib.TopicNameEnum;
import org.geovistory.toolbox.streams.lib.TsRegisterInputTopic;

import javax.enterprise.context.ApplicationScoped;
import javax.inject.Inject;

/**
 * This class provides helper methods to register
 * source topics (topics consumed but not generated by this app)
 */
@ApplicationScoped
public class RegisterInputTopic extends TsRegisterInputTopic {

    @Inject
    AvroSerdes avroSerdes;
    @Inject
    public BuilderSingleton builderSingleton;

    @ConfigProperty(name = "ts.input.topic.name.prefix", defaultValue = "")
    String prefix;
    @ConfigProperty(name = "ts.topic.nodes")
    public String tsTopicNodes = "nodes";

    RegisterInputTopic() {
    }

    public RegisterInputTopic(AvroSerdes avroSerdes, BuilderSingleton builderSingleton) {
        this.avroSerdes = avroSerdes;
        this.builderSingleton = builderSingleton;
    }

    public KTable<dev.information.statement.Key, dev.information.statement.Value> infStatementTable() {
        return getRepartitionedTable(
                builderSingleton.builder,
                prefixedIn(prefix, TopicNameEnum.inf_statement.getValue()),
                avroSerdes.InfStatementKey(),
                avroSerdes.InfStatementValue()
        );
    }

    public KTable<NodeKey, NodeValue> nodeTable() {
        return getTable(
                builderSingleton.builder,
                tsTopicNodes,
                avroSerdes.NodeKey(),
                avroSerdes.NodeValue()
        );
    }

}