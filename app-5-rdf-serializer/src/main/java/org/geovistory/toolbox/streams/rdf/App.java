/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package org.geovistory.toolbox.streams.rdf;

import org.apache.kafka.streams.Topology;
import org.eclipse.microprofile.config.inject.ConfigProperty;
import org.geovistory.toolbox.streams.lib.TsAdmin;
import org.geovistory.toolbox.streams.rdf.processors.project.*;

import jakarta.enterprise.context.ApplicationScoped;
import jakarta.enterprise.inject.Produces;
import jakarta.inject.Inject;
import java.util.ArrayList;

@ApplicationScoped
public class App {

    @ConfigProperty(name = "ts.output.topic.partitions")
    int outputTopicPartitions;
    @ConfigProperty(name = "ts.output.topic.replication.factor")
    short outputTopicReplicationFactor;

    @ConfigProperty(name = "quarkus.kafka.streams.bootstrap.servers")
    String bootstrapServers;
    @Inject
    ProjectStatementToUri projectStatementToUri;
    @Inject
    ProjectStatementToLiteral projectStatementToLiteral;
    @Inject
    ProjectCustomRdfsLabels projectCustomRdfsLabels;
    @Inject
    ProjectOwlClass projectOwlClass;
    @Inject
    ProjectOwlSameAs projectOwlSameAs;
    @Inject
    BuilderSingleton builderSingleton;
    @Inject
    RegisterInputTopic registerInputTopic;
    @Inject
    OutputTopicNames outputTopicNames;

    Boolean initialized = false;

    //  All we need to do for that is to declare a CDI producer method which returns the Kafka Streams Topology; the Quarkus extension will take care of configuring, starting and stopping the actual Kafka Streams engine.
    @Produces
    public Topology buildTopology() {


        if (!initialized) {
            initialized = true;

            // add processors of sub-topologies
            addSubTopologies();

            // create topics in advance to ensure correct configuration (partition, compaction, ect.)
            createTopics();
        }

        // build the topology
        return builderSingleton.builder.build();
    }


    private void addSubTopologies() {

        addProjectView();
        //addCommunityView(builder, inputTopics, "toolbox");
        //addMergedView(builder, "toolbox");
    }

    private void addProjectView() {
        // add sub-topology ProjectStatementToUri
        projectStatementToUri.addProcessors(
                registerInputTopic.projectStatementWithEntityStream()
        );

        // add sub-topology ProjectStatementToLiteral
        projectStatementToLiteral.addProcessors(
                registerInputTopic.projectStatementWithLiteralStream()
        );

        // add sub-topology ProjectClassLabel
        projectOwlClass.addProcessors(
                registerInputTopic.projectClassLabelStream()
        );

        // add sub-topology ProjectCustomRdfsLabels
        projectCustomRdfsLabels.addProcessors(
                registerInputTopic.projectStream()
        );

        // add sub-topology ProjectOwlSameAs
        projectOwlSameAs.addProcessors(
                registerInputTopic.projectStatementWithEntityStream(),
                registerInputTopic.projectStatementWithLiteralStream()
        );
    }

    private void createTopics() {
        var admin = new TsAdmin(bootstrapServers);

        // create output topics (with number of partitions and delete.policy=compact)
        var topics = new ArrayList<String>();
        topics.add(outputTopicNames.projectRdf());
        // topics.add(CommunityEntityPreview.getOutputTopicName("toolbox")); TODO do not forget to add community output topic when available
        admin.createOrConfigureTopics(topics, outputTopicPartitions, outputTopicReplicationFactor);

    }

}
