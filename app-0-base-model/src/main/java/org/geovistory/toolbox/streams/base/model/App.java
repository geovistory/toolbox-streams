/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package org.geovistory.toolbox.streams.base.model;

import org.apache.kafka.streams.Topology;
import org.eclipse.microprofile.config.inject.ConfigProperty;
import org.geovistory.toolbox.streams.base.model.processors.*;
import org.geovistory.toolbox.streams.lib.TsAdmin;

import jakarta.enterprise.context.ApplicationScoped;
import jakarta.enterprise.inject.Produces;
import jakarta.inject.Inject;
import java.util.ArrayList;

@ApplicationScoped
public class App {

    @ConfigProperty(name = "ts.output.topic.partitions")
    int outputTopicPartitions;
    @ConfigProperty(name = "ts.output.topic.replication.factor")
    short outputTopicReplicationFactor;

    @ConfigProperty(name = "quarkus.kafka.streams.bootstrap.servers")
    String bootstrapServers;

    @Inject
    BuilderSingleton builderSingleton;

    @Inject
    OntomeClassProjected ontomeClassProjected;
    @Inject
    OntomeClassMetadata ontomeClassMetadata;
    @Inject
    OntomeClassLabel ontomeClassLabel;
    @Inject
    OntomePropertyProjected ontomePropertyProjected;
    @Inject
    OntomePropertyLabel ontomePropertyLabel;
    @Inject
    HasTypeProperty hasTypeProperty;

    @Inject
    OutputTopicNames outputTopicNames;
    Boolean initialized = false;

    //  All we need to do for that is to declare a CDI producer method which returns the Kafka Streams Topology; the Quarkus extension will take care of configuring, starting and stopping the actual Kafka Streams engine.
    @Produces
    public Topology buildTopology() {


        // add processors of sub-topologies
        addSubTopologies();

        // create topics in advance to ensure correct configuration (partition, compaction, ect.)
        createTopics();

        // build the topology
        return builderSingleton.builder.build();
    }


    private void addSubTopologies() {

        if (!initialized) {
            initialized = true;


            var classProjectedRegistrar = ontomeClassProjected.getRegistrar();
            classProjectedRegistrar.addSink();
            var propertyProjectedRegistrar = ontomePropertyProjected.getRegistrar();
            propertyProjectedRegistrar.addSink();


            // add sub-topology OntomeClassMetadata
            ontomeClassMetadata.addProcessors(classProjectedRegistrar.kStream);
            // add sub-topology OntomeClassLabel
            ontomeClassLabel.addProcessors(classProjectedRegistrar.kStream);
            // add sub-topology OntomePropertyLabel
            ontomePropertyLabel.addProcessors(propertyProjectedRegistrar.kStream);
            // add sub-topology HasTypeProperty
            hasTypeProperty.addProcessors(propertyProjectedRegistrar.kStream);

        }
    }

    private void createTopics(
    ) {
        var admin = new TsAdmin(bootstrapServers);

        // create output topics (with number of partitions and delete.policy=compact)
        var topics = new ArrayList<String>();
        topics.add(outputTopicNames.ontomeClassLabel());
        topics.add(outputTopicNames.ontomePropertyLabel());
        topics.add(outputTopicNames.hasTypeProperty());
        topics.add(outputTopicNames.ontomeClassMetadata());
        topics.add(outputTopicNames.ontomeClass());
        topics.add(outputTopicNames.ontomeProperty());
        admin.createOrConfigureTopics(topics, outputTopicPartitions, outputTopicReplicationFactor);

    }


}
