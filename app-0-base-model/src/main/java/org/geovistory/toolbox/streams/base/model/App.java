/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package org.geovistory.toolbox.streams.base.model;

import org.apache.kafka.streams.Topology;
import org.eclipse.microprofile.config.inject.ConfigProperty;
import org.geovistory.toolbox.streams.base.model.processors.*;
import org.geovistory.toolbox.streams.lib.TsAdmin;
import org.geovistory.toolbox.streams.lib.Utils;
import org.jboss.logging.Logger;

import javax.enterprise.context.ApplicationScoped;
import javax.enterprise.inject.Produces;
import javax.inject.Inject;
import java.util.ArrayList;

@ApplicationScoped
public class App {
    private static final Logger LOGGER = Logger.getLogger("ListenerBean");
    @ConfigProperty(name = "ts.input.topic.name.prefix", defaultValue = "")
    String inPrefix;
    @ConfigProperty(name = "ts.output.topic.name.prefix", defaultValue = "")
    public String outPrefix;
    @ConfigProperty(name = "ts.output.topic.partitions")
    int outputTopicPartitions;
    @ConfigProperty(name = "ts.output.topic.replication.factor")
    short outputTopicReplicationFactor;

    @ConfigProperty(name = "quarkus.kafka.streams.bootstrap.servers")
    String bootstrapServers;

    @Inject
    AvroSerdes avroSerdes;

    @Inject
    BuilderSingleton builderSingleton;

    @Inject
    OntomeClassMetadata ontomeClassMetadata;
    @Inject
    OntomeClassLabel ontomeClassLabel;
    @Inject
    OntomePropertyLabel ontomePropertyLabel;
    @Inject
    HasTypeProperty hasTypeProperty;

    Boolean initialized = false;

    String ontomePropertyTopicIn;
    String ontomePropertyTopicOut;
    String ontomeClassTopicIn;
    String ontomeClassTopicOut;

    //  All we need to do for that is to declare a CDI producer method which returns the Kafka Streams Topology; the Quarkus extension will take care of configuring, starting and stopping the actual Kafka Streams engine.
    @Produces
    public Topology buildTopology() {

        ontomePropertyTopicIn = Utils.prefixedIn(inPrefix, "ontome_property");
        ontomePropertyTopicOut = Utils.prefixedOut(outPrefix, "ontome_property");
        ontomeClassTopicIn = Utils.prefixedIn(inPrefix, "ontome_class");
        ontomeClassTopicOut = Utils.prefixedOut(outPrefix, "ontome_class");

        // add processors of sub-topologies
        addSubTopologies();

        // create topics in advance to ensure correct configuration (partition, compaction, ect.)
        createTopics();

        // build the topology
        return builderSingleton.builder.build();
    }


    private void addSubTopologies() {

        if (!initialized) {
            var ontomeClass = new OntomeClassProjected(
                    avroSerdes,
                    builderSingleton.builder,
                    ontomeClassTopicIn,
                    ontomeClassTopicOut
            );
            var ontomeProperty = new OntomePropertyProjected(
                    avroSerdes,
                    builderSingleton.builder,
                    ontomeClassTopicIn,
                    ontomeClassTopicOut
            );

            ontomeClass.addSink();
            ontomeProperty.addSink();


            // add sub-topology OntomeClassMetadata
            ontomeClassMetadata.addProcessors(ontomeClass.kStream);
            // add sub-topology OntomeClassLabel
            ontomeClassLabel.addProcessors(ontomeClass.kStream);
            // add sub-topology OntomePropertyLabel
            ontomePropertyLabel.addProcessors(ontomeProperty.kStream);
            // add sub-topology HasTypeProperty
            hasTypeProperty.addProcessors(ontomeProperty.kStream);

            initialized = true;
        }
    }

    private  void createTopics(
    ) {
        var admin = new TsAdmin(bootstrapServers);

        // create output topics (with number of partitions and delete.policy=compact)
        var topics = new ArrayList<String>();
        topics.add(ontomeClassLabel.outOntomeClassLabel());
        topics.add(ontomePropertyLabel.outOntomePropertyLabel());
        topics.add(ontomeClassMetadata.outOntomeClassMetadata());
        topics.add(hasTypeProperty.outHasTypeProperty());
        topics.add(ontomeClassTopicOut);
        topics.add(ontomePropertyTopicOut);
        admin.createOrConfigureTopics(topics, outputTopicPartitions, outputTopicReplicationFactor);

    }


}
