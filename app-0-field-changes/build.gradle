import java.util.regex.Pattern

/* 1
 * This file was generated by the Gradle 'init' task.
 */

plugins {
    id 'org.geovistory.toolbox.streams.java-application-conventions'

    // used to set semantic version
    id 'com.glovoapp.semantic-versioning' version '1.1.10'

    // Used to containerize the project
    id 'com.google.cloud.tools.jib' version '3.3.0'

    id 'io.quarkus'
}


dependencies {
}

application {
    // Define the main class for the application.
    mainClassName = 'org.geovistory.toolbox.streams.field.changes.App'
}

jar {
    manifest.attributes('Main-Class': application.mainClassName)
}

jib {
    from {
        image = "ghcr.io/geovistory/kafka-streams-base:0.2"
    }
    to {
        image = getDockerImageTag()
    }
    container {
        jvmFlags = []
        mainClass = application.mainClassName
        format = 'OCI'
    }
}


/**
 * Get docker tag suffix from semanti version and pull request metadata.
 * @return for example "0.2.3" or "0.1.0-pr-12.0"
 */
String getDockerTagSuffix() {
    if (pullRequestNumber) return "${project.semanticVersion.version.get()}-pr-${pullRequestNumber}.${pullRequestPushCount}"
    else return "${project.semanticVersion.version.get()}"
}
/**
 * Get docker image tag
 * @return for example "ghcr.io/geovistory/toolbox-streams:0.1.0"
 */
String getDockerImageTag() {
    return 'ghcr.io/geovistory/toolbox-streams-field-changes:' + getDockerTagSuffix()
}

task("printDockerImageTag") {
    doLast {
        println getDockerImageTag()
    }
}

task("printDockerTagSuffix") {
    doLast {
        println getDockerTagSuffix()
    }
}

// inspired by https://discuss.gradle.org/t/how-to-get-gradle-variables-in-my-java-method/37580/2
task generateJava {
    ext.outputDir = "$buildDir/generated/java"
    outputs.dir outputDir
    doLast {
        mkdir "$outputDir/org/geovistory/toolbox/streams/field/changes"
        file("$outputDir/org/geovistory/toolbox/streams/field/changes/BuildProperties.java").text =
                """|package org.geovistory.toolbox.streams.field.changes;
               |public class BuildProperties {
               |    public static String getDockerTagSuffix() { return "${getDockerTagSuffix()}"; }
               |    public static String getDockerImageTag() { return "${getDockerImageTag()}"; }
               |}""".stripMargin()
    }
}


task generateReflectionConfiguration {
    ext.outputDir = "$buildDir/generated/java"
    outputs.dir outputDir
    doFirst {
        var path = project.projectDir.toString() + "/src/main/java/org.geovistory.toolbox.streams.field.changes/AvroSerdes.java"
        var p = Pattern.compile("public Serde<(.*)>", Pattern.DOTALL)
        var classNames = new ArrayList<String>()

        try {
            var myObj = new File(path)
            Scanner myReader = new Scanner(myObj)
            while (myReader.hasNextLine()) {
                String line = myReader.nextLine()
                var x = (line =~ p)
                if (x.size() > 0) {
                    var className = (line =~ p)[0][1].toString() + ".class"
                    classNames.add(className)
                    if (className.startsWith("dev.")) {
                        classNames.add(className.replace("dev.", "stag."))
                        classNames.add(className.replace("dev.", "prod."))
                    }
                }
            }
            myReader.close()
        } catch (FileNotFoundException e) {
            System.out.println("An error occurred.")
            e.printStackTrace()
        }

        mkdir "$outputDir/org/geovistory/toolbox/streams/field/changes"
        file("$outputDir/org/geovistory/toolbox/streams/field/changes/ReflectionConfig.java").text =
                """|package org.geovistory.toolbox.streams.field.changes;
                |
                |import io.quarkus.runtime.annotations.RegisterForReflection;
                |import org.geovistory.toolbox.streams.avro.*;
                |
                |@RegisterForReflection(targets = {
                |   """.stripMargin() +
                        classNames.toArray().join(",\n|   ").stripMargin() +
                        """|})
                |public class ReflectionConfig {
                |}""".stripMargin()
    }
}
compileJava {
    dependsOn(generateReflectionConfiguration)
    dependsOn(generateJava)
}
sourceSets.main.java.srcDir generateReflectionConfiguration.outputDir
sourceSets.main.java.srcDir generateJava.outputDir



