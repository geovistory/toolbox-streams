/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package org.geovistory.toolbox.streams.field.changes;

import org.apache.kafka.streams.Topology;
import org.eclipse.microprofile.config.inject.ConfigProperty;
import org.geovistory.toolbox.streams.field.changes.processors.ProjectFieldChange;

import javax.enterprise.context.ApplicationScoped;
import javax.enterprise.inject.Produces;
import javax.inject.Inject;

@ApplicationScoped
public class App {

    @ConfigProperty(name = "ts.output.topic.partitions")
    int outputTopicPartitions;
    @ConfigProperty(name = "ts.output.topic.replication.factor")
    short outputTopicReplicationFactor;

    @ConfigProperty(name = "quarkus.kafka.streams.bootstrap.servers")
    String bootstrapServers;

    @Inject
    ProjectFieldChange projectFieldChange;

    @Inject
    BuilderSingleton builderSingleton;

    @Inject
    RegisterInputTopic registerInputTopic;

    //  All we need to do for that is to declare a CDI producer method which returns the Kafka Streams Topology; the Quarkus extension will take care of configuring, starting and stopping the actual Kafka Streams engine.
    @Produces
    public Topology buildTopology() {


        // add processors of sub-topologies
        addSubTopologies();

        // create topics in advance to ensure correct configuration (partition, compaction, ect.)
        createTopics();

        // build the topology
        return builderSingleton.builder.build();
    }

    private void addSubTopologies() {

        // register input topics as KTables
        var proInfoProjRelTable = registerInputTopic.proInfoProjRelTable();
        var infStatementTable = registerInputTopic.infStatementTable();

        // add sub-topology ProjectFieldChange
        projectFieldChange.addProcessors(
                infStatementTable,
                proInfoProjRelTable
        );

    }

    private void createTopics() {
        // create output topics (with number of partitions and delete.policy=compact)
        new Admin(bootstrapServers)
                .createOrConfigureTopics(new String[]{
                        projectFieldChange.outputTopicProjectFieldChange()
                }, outputTopicPartitions, outputTopicReplicationFactor);

    }

}
