/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package org.geovistory.toolbox.streams.field.changes;


import io.quarkus.runtime.ShutdownEvent;
import org.apache.kafka.streams.Topology;
import org.eclipse.microprofile.config.inject.ConfigProperty;
import org.geovistory.toolbox.streams.field.changes.processors.ProjectFieldChange;
import org.geovistory.toolbox.streams.lib.TsAdmin;
import org.jboss.logging.Logger;

import jakarta.enterprise.context.ApplicationScoped;
import jakarta.enterprise.event.Observes;
import jakarta.enterprise.inject.Produces;
import jakarta.inject.Inject;
import java.util.ArrayList;

@ApplicationScoped
public class App {
    private static final Logger LOGGER = Logger.getLogger("ListenerBean");

    @ConfigProperty(name = "ts.output.topic.partitions")
    int outputTopicPartitions;
    @ConfigProperty(name = "ts.output.topic.replication.factor")
    short outputTopicReplicationFactor;

    @ConfigProperty(name = "quarkus.kafka.streams.bootstrap.servers")
    String bootstrapServers;

    @Inject
    ProjectFieldChange projectFieldChange;

    @Inject
    BuilderSingleton builderSingleton;

    @Inject
    RegisterInputTopic registerInputTopic;

    Boolean initialized = false;

    //  All we need to do for that is to declare a CDI producer method which returns the Kafka Streams Topology; the Quarkus extension will take care of configuring, starting and stopping the actual Kafka Streams engine.
    @Produces
    public Topology buildTopology() {


        // add processors of sub-topologies
        addSubTopologies();

        // create topics in advance to ensure correct configuration (partition, compaction, ect.)
        createTopics();

        // build the topology
        return builderSingleton.builder.build();
    }

    private void addSubTopologies() {

        if (!initialized) {
            initialized = true;

            // register input topics as KTables
            var proInfoProjRelTable = registerInputTopic.proInfoProjRelTable();
            var infStatementTable = registerInputTopic.infStatementTable();

            // add sub-topology ProjectFieldChange
            projectFieldChange.addProcessors(
                    infStatementTable,
                    proInfoProjRelTable
            );
        }

    }

    private void createTopics() {
        // create output topics (with number of partitions and delete.policy=compact)
        var topics = new ArrayList<String>();
        topics.add(projectFieldChange.outputTopicProjectFieldChange());
        new TsAdmin(bootstrapServers)
                .createOrConfigureTopics(topics, outputTopicPartitions, outputTopicReplicationFactor);

    }


    // Called when the application is terminating
    public void onStop(@Observes ShutdownEvent ev) {
        LOGGER.info("The application is stopping...");

        // Terminate the container
        System.exit(0);
    }
}
