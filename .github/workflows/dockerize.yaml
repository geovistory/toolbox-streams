name: Test and Dockerize

on:
  pull_request:
    branches: [ "main" ]

jobs:

  # JOB to run change detection
  detect-changes:
    runs-on: ubuntu-latest
    # Required permissions
    permissions:
      pull-requests: read
    # Set job outputs to values from filter step
    outputs:
      app: ${{ steps.filter.outputs.app }}
      app-field-changes: ${{ steps.filter.outputs.app-field-changes }}
      app-base-model: ${{ steps.filter.outputs.app-base-model }}
      app-statement-enriched: ${{ steps.filter.outputs.app-statement-enriched }}
    steps:
      # For pull requests it's not necessary to checkout the code
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            app:
              - 'app/**'
            app-field-changes:
              - 'app-field-changes/**'
            app-base-model:
              - 'app-base-model/**'
            app-statement-enriched:
              - 'app-statement-enriched/**'

  # JOB to extract PR metadata
  pull-request-number:
    runs-on: ubuntu-latest
    outputs:
      number: ${{ steps.pull_request.outputs.number }}

    steps:
    - name: Extract number of pull request
      id: pull_request
      run: |
        echo ::set-output name=number::$(jq --raw-output .pull_request.number "$GITHUB_EVENT_PATH")

    - name: Prints number of pull request
      run: echo Pull request branch is '${{ steps.pull_request.outputs.number }}'

  dockerize-app:
    needs: [detect-changes, pull-request-number]
    if: ${{ needs.detect-changes.outputs.app == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: Send Discord Notification
        uses: sarisia/actions-status-discord@v1
        if: always()
        with:
          webhook: ${{ secrets.DISCORD_GITHUB_CHANNEL_WEBHOOK }}
          title: "Test and Dockerize 'app'"
          description: "PR: ${{ needs.pull-request-number.outputs.number }}"
          color: 0xffed2b
          username: GitHub Actions

      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref }}

      - name: Git Identity
        run: |
          git config --global user.name 'geovbot'
          git config --global user.email 'github.bot@geovistory.org'
          git remote set-url origin https://$GITHUB_ACTOR:$GITHUB_TOKEN@github.com/$GITHUB_REPOSITORY
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'

      # This step will build a Java project with Gradle and cache/restore any dependencies  to improve
      # the workflow execution time. For more information see:
      # https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle
      - name: Build with Gradle
        uses: gradle/gradle-build-action@67421db6bd0bf253fb4bd25b31ebb98943c375e1
        with:
          arguments: app:build # "app:" points to /app

      # Create docker image
      - name: Create docker image
        run: ./gradlew app:jibDockerBuild

      # login to ghcr.io
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # push docker image
      - name: Push docker image
        run: docker push $(gradle -q app:printDockerImageTag)

      # extract tag (e.g. 1.0.1-pr-32.0)
      - name: Extract docker tag suffix
        id: extract_docker_tag_suffix
        run: |
          echo ::set-output name=value::$(gradle -q app:printDockerTagSuffix)

      - name: Send Discord Notification
        uses: sarisia/actions-status-discord@v1
        if: always()
        with:
          webhook: ${{ secrets.DISCORD_GITHUB_CHANNEL_WEBHOOK }}
          title: "Dockerize 'app' > Done"
          description: "Image Tag: ${{steps.extract_docker_tag_suffix.outputs.value}}"
          color: 0x0000ff
          username: GitHub Actions

  dockerize-app-field-changes:
    needs: [detect-changes, pull-request-number]
    if: ${{ needs.detect-changes.outputs.app-field-changes == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: Send Discord Notification
        uses: sarisia/actions-status-discord@v1
        if: always()
        with:
          webhook: ${{ secrets.DISCORD_GITHUB_CHANNEL_WEBHOOK }}
          title: "Test and Dockerize 'app-field-changes'"
          description: "PR: ${{ needs.pull-request-number.outputs.number }}"
          color: 0xffed2b
          username: GitHub Actions

      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref }}

      - name: Git Identity
        run: |
          git config --global user.name 'geovbot'
          git config --global user.email 'github.bot@geovistory.org'
          git remote set-url origin https://$GITHUB_ACTOR:$GITHUB_TOKEN@github.com/$GITHUB_REPOSITORY
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'

      # This step will build a Java project with Gradle and cache/restore any dependencies  to improve
      # the workflow execution time. For more information see:
      # https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle
      - name: Build with Gradle
        uses: gradle/gradle-build-action@67421db6bd0bf253fb4bd25b31ebb98943c375e1
        with:
          arguments: app-field-changes:build # "app-field-changes:" points to /app-field-changes

      # Create docker image
      - name: Create docker image
        run: ./gradlew app-field-changes:jibDockerBuild

      # login to ghcr.io
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # push docker image
      - name: Push docker image
        run: docker push $(gradle -q app-field-changes:printDockerImageTag)

      # extract tag (e.g. 1.0.1-pr-32.0)
      - name: Extract docker tag suffix
        id: extract_docker_tag_suffix
        run: |
          echo ::set-output name=value::$(gradle -q app-field-changes:printDockerTagSuffix)

      - name: Send Discord Notification
        uses: sarisia/actions-status-discord@v1
        if: always()
        with:
          webhook: ${{ secrets.DISCORD_GITHUB_CHANNEL_WEBHOOK }}
          title: "Dockerize 'app-field-changes' > Done"
          description: "Image Tag: ${{steps.extract_docker_tag_suffix.outputs.value}}"
          color: 0x0000ff
          username: GitHub Actions
  dockerize-app-base-model:
    needs: [detect-changes, pull-request-number]
    if: ${{ needs.detect-changes.outputs.app-base-model == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: Send Discord Notification
        uses: sarisia/actions-status-discord@v1
        if: always()
        with:
          webhook: ${{ secrets.DISCORD_GITHUB_CHANNEL_WEBHOOK }}
          title: "Test and Dockerize 'app-base-model'"
          description: "PR: ${{ needs.pull-request-number.outputs.number }}"
          color: 0xffed2b
          username: GitHub Actions

      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref }}

      - name: Git Identity
        run: |
          git config --global user.name 'geovbot'
          git config --global user.email 'github.bot@geovistory.org'
          git remote set-url origin https://$GITHUB_ACTOR:$GITHUB_TOKEN@github.com/$GITHUB_REPOSITORY
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'

      # This step will build a Java project with Gradle and cache/restore any dependencies  to improve
      # the workflow execution time. For more information see:
      # https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle
      - name: Build with Gradle
        uses: gradle/gradle-build-action@67421db6bd0bf253fb4bd25b31ebb98943c375e1
        with:
          arguments: app-base-model:build # "app-base-model:" points to /app-base-model

      # Create docker image
      - name: Create docker image
        run: ./gradlew app-base-model:jibDockerBuild

      # login to ghcr.io
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # push docker image
      - name: Push docker image
        run: docker push $(gradle -q app-base-model:printDockerImageTag)

      # extract tag (e.g. 1.0.1-pr-32.0)
      - name: Extract docker tag suffix
        id: extract_docker_tag_suffix
        run: |
          echo ::set-output name=value::$(gradle -q app-base-model:printDockerTagSuffix)

      - name: Send Discord Notification
        uses: sarisia/actions-status-discord@v1
        if: always()
        with:
          webhook: ${{ secrets.DISCORD_GITHUB_CHANNEL_WEBHOOK }}
          title: "Dockerize 'app-base-model' > Done"
          description: "Image Tag: ${{steps.extract_docker_tag_suffix.outputs.value}}"
          color: 0x0000ff
          username: GitHub Actions
  dockerize-app-statement-enriched:
    needs: [detect-changes, pull-request-number]
    if: ${{ needs.detect-changes.outputs.app-statement-enriched == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: Send Discord Notification
        uses: sarisia/actions-status-discord@v1
        if: always()
        with:
          webhook: ${{ secrets.DISCORD_GITHUB_CHANNEL_WEBHOOK }}
          title: "Test and Dockerize 'app-statement-enriched'"
          description: "PR: ${{ needs.pull-request-number.outputs.number }}"
          color: 0xffed2b
          username: GitHub Actions

      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref }}

      - name: Git Identity
        run: |
          git config --global user.name 'geovbot'
          git config --global user.email 'github.bot@geovistory.org'
          git remote set-url origin https://$GITHUB_ACTOR:$GITHUB_TOKEN@github.com/$GITHUB_REPOSITORY
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'

      # This step will build a Java project with Gradle and cache/restore any dependencies  to improve
      # the workflow execution time. For more information see:
      # https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle
      - name: Build with Gradle
        uses: gradle/gradle-build-action@67421db6bd0bf253fb4bd25b31ebb98943c375e1
        with:
          arguments: app-statement-enriched:build # "app-statement-enriched:" points to /app-statement-enriched

      # Create docker image
      - name: Create docker image
        run: ./gradlew app-statement-enriched:jibDockerBuild

      # login to ghcr.io
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # push docker image
      - name: Push docker image
        run: docker push $(gradle -q app-statement-enriched:printDockerImageTag)

      # extract tag (e.g. 1.0.1-pr-32.0)
      - name: Extract docker tag suffix
        id: extract_docker_tag_suffix
        run: |
          echo ::set-output name=value::$(gradle -q app-statement-enriched:printDockerTagSuffix)

      - name: Send Discord Notification
        uses: sarisia/actions-status-discord@v1
        if: always()
        with:
          webhook: ${{ secrets.DISCORD_GITHUB_CHANNEL_WEBHOOK }}
          title: "Dockerize 'app-statement-enriched' > Done"
          description: "Image Tag: ${{steps.extract_docker_tag_suffix.outputs.value}}"
          color: 0x0000ff
          username: GitHub Actions
  # JOB to update the metadata about the PR
  update-pull-request-metadata:

    # about needs and if see: https://stackoverflow.com/a/66358138/11786845
    needs: [
      pull-request-number,
      dockerize-app,
      dockerize-app-field-changes,
      dockerize-app-base-model,
      dockerize-app-statement-enriched
    ]
    # contains(needs.*.result, 'success') will be true if at least one of the jobs succeeded.
    # !(contains(needs.*.result, 'failure')) is false if any job failed
    if: |
      always()
      && contains(needs.*.result, 'success')
      && !contains(needs.*.result, 'failure')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref }}

      # this will update metadata about PR for the docker tag in /build.gradle
      - name: Update pull request metadata in build.gradle
        id: version
        run: bash updatePRMetadata.bash ${{ needs.pull-request-number.outputs.number }}

      # commit the PR metadata updates
      - uses: EndBug/add-and-commit@v5
        with:
          message: 'chore(): update pr metadata'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
